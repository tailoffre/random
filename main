import random
import string

def generate_password(length, include_lowercase, include_uppercase, include_digits, include_special_chars):
    characters = ''
    if include_lowercase:
        characters += string.ascii_lowercase
    if include_uppercase:
        characters += string.ascii_uppercase
    if include_digits:
        characters += string.digits
    if include_special_chars:
        characters += string.punctuation

    if not characters:
        print("未选择任何字符类型。")
        return ""

    password = ''.join(random.choice(characters) for _ in range(length))
    return password

print("密码生成器命令行工具")

while True:
    print("\n请选择操作：")
    print("1. 生成密码")
    print("2. 退出程序")

    choice = input("请选择操作（输入数字）：")

    if choice == '2':
        print("谢谢使用，再见！")
        break

    if choice == '1':
        length = int(input("请输入密码长度："))
        include_lowercase = input("是否包含小写字母？（输入 y/n）：").lower() == 'y'
        include_uppercase = input("是否包含大写字母？（输入 y/n）：").lower() == 'y'
        include_digits = input("是否包含数字？（输入 y/n）：").lower() == 'y'
        include_special_chars = input("是否包含特殊字符？（输入 y/n）：").lower() == 'y'

        password = generate_password(length, include_lowercase, include_uppercase, include_digits, include_special_chars)
        print("生成的密码：", password)
    else:
        print("无效的选择，请重新输入。")

//以上代码是一个简单的密码生成器命令行工具。用户可以选择生成密码，并输入所需的密码长度以及包含的字符类型。

//enerate_password() 函数接受密码长度和字符类型的参数。根据用户选择的字符类型，函数构建一个字符集合，然后随机选择字符生成密码。

//应用程序使用一个无限循环来等待用户输入操作和相应的信息，并根据用户选择执行相应的操作。用户可以选择退出程序来结束应用程序的运行。

//请注意，这只是一个简单的示例，使用了 random 和 string 模块来生成随机密码。在实际项目中，您可能需要考虑更复杂的密码生成策略和密码强度要求，以实现一个更安全和可定制的密码生成工具。
